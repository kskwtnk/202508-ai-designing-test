name: Auto Capture Knowledge
on:
  pull_request:
    types: [closed]
    branches: [main]

jobs:
  capture-lessons:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: read
      actions: read
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create knowledge update branch
        run: |
          BRANCH_NAME="auto/knowledge-update-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME

      - name: Analyze PR changes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Â§âÊõ¥„Åï„Çå„Åü„Éï„Ç°„Ç§„É´„ÇíÂàÜÊûê
          PR_NUMBER=${{ github.event.pull_request.number }}
          gh pr view $PR_NUMBER --json files --jq '.files[].path' > changed_files.txt
          gh pr view $PR_NUMBER --json title,body,labels --jq . > pr_info.json
          echo "Analyzing changes from PR #$PR_NUMBER"

      - name: Post knowledge extraction request
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Claude Code Action„ÇíÂëº„Å≥Âá∫„Åô„Åü„ÇÅ„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÊäïÁ®ø
          gh pr comment ${{ github.event.pull_request.number }} --body "$(cat << 'EOF'
          @claude „Åì„ÅÆPR„Åã„ÇâÂ≠¶ÁøíÂèØËÉΩ„Å™Áü•Ë≠ò„Çí‰ª•‰∏ã„ÅÆÂΩ¢Âºè„ÅßÊäΩÂá∫„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö

          ## üìö Áü•Ë≠òÊäΩÂá∫„Çø„Çπ„ÇØ
          
          ‰ª•‰∏ã„ÅÆ3„Å§„ÅÆ„Çª„ÇØ„Ç∑„Éß„É≥„Å´ÂàÜ„Åë„Å¶„ÄÅ„Åì„ÅÆPR„Åã„ÇâÂ≠¶„Çì„Å†„Åì„Å®„Çí„Åæ„Å®„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          ### 1. ÂÆüË£Ö„Éë„Çø„Éº„É≥ (patterns.mdÁî®)
          - ‰ΩøÁî®„Åï„Çå„ÅüÊäÄË°ì„Éë„Çø„Éº„É≥
          - „Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ
          - ÂÜçÂà©Áî®ÂèØËÉΩ„Å™„Ç≥„Éº„ÉâÊßãÈÄ†
          
          ### 2. Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ (challenges.mdÁî®)
          - Áõ¥Èù¢„Åó„ÅüÂïèÈ°å
          - Ëß£Ê±∫ÊñπÊ≥ï
          - ‰ªäÂæå„ÅÆ‰∫àÈò≤Á≠ñ
          
          ### 3. Â≠¶„Çì„Å†ÊïôË®ì (lessons.mdÁî®)
          - ÈáçË¶Å„Å™Â≠¶„Å≥
          - Â∞ÜÊù•„Å∏„ÅÆÊèêË®Ä
          - „ÉÅ„Éº„É†„ÅßÂÖ±Êúâ„Åô„Åπ„ÅçÁü•Ë¶ã
          
          ÂêÑ„Çª„ÇØ„Ç∑„Éß„É≥„ÇíMarkdownÂΩ¢Âºè„ÅßË®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          EOF
          )"
          
      - name: Wait for Claude response
        run: |
          echo "Waiting for Claude Code Action to respond..."
          sleep 30  # Claude Code Action„ÅÆÂøúÁ≠î„ÇíÂæÖ„Å§
          
      - name: Extract Claude's knowledge from PR comments
        id: extract-knowledge
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ÊúÄÊñ∞„ÅÆClaude Code Action„Ç≥„É°„É≥„Éà„ÇíÂèñÂæó
          gh pr view ${{ github.event.pull_request.number }} --json comments --jq '.comments[-1].body' > claude_response.txt
          
          # „Ç≥„É°„É≥„Éà„ÅåÂ≠òÂú®„Åó„ÄÅClaude Code Action„Åã„Çâ„ÅÆ„ÇÇ„ÅÆ„ÅãÁ¢∫Ë™ç
          if grep -q "ÂÆüË£Ö„Éë„Çø„Éº„É≥" claude_response.txt && grep -q "Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ" claude_response.txt; then
            echo "has_knowledge=true" >> $GITHUB_OUTPUT
            
            # Áü•Ë≠ò„ÇíÂêÑ„Éï„Ç°„Ç§„É´„Å´ÂàÜÂâ≤„Åó„Å¶‰øùÂ≠ò
            # TODO: „Çà„ÇäÊ¥óÁ∑¥„Åï„Çå„Åü„Éë„Éº„Çµ„Éº„Å´ÁΩÆ„ÅçÊèõ„Åà
            echo "# Auto-extracted Knowledge from PR #${{ github.event.pull_request.number }}" > knowledge_patterns.md
            echo "" >> knowledge_patterns.md
            sed -n '/ÂÆüË£Ö„Éë„Çø„Éº„É≥/,/Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ/p' claude_response.txt | head -n -1 >> knowledge_patterns.md
            
            echo "# Auto-extracted Challenges from PR #${{ github.event.pull_request.number }}" > knowledge_challenges.md
            echo "" >> knowledge_challenges.md
            sed -n '/Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ/,/Â≠¶„Çì„Å†ÊïôË®ì/p' claude_response.txt | head -n -1 >> knowledge_challenges.md
            
            echo "# Auto-extracted Lessons from PR #${{ github.event.pull_request.number }}" > knowledge_lessons.md
            echo "" >> knowledge_lessons.md
            sed -n '/Â≠¶„Çì„Å†ÊïôË®ì/,$p' claude_response.txt >> knowledge_lessons.md
          else
            echo "has_knowledge=false" >> $GITHUB_OUTPUT
            echo "No knowledge extracted from Claude Code Action"
          fi
          
      - name: Update knowledge files
        if: steps.extract-knowledge.outputs.has_knowledge == 'true'
        run: |
          # Êó¢Â≠ò„ÅÆ„Éï„Ç°„Ç§„É´„Å´Áü•Ë≠ò„ÇíËøΩÂä†
          if [ -f knowledge_patterns.md ]; then
            echo "" >> .kiro/steering/patterns.md
            cat knowledge_patterns.md >> .kiro/steering/patterns.md
          fi
          
          if [ -f knowledge_challenges.md ]; then
            echo "" >> .kiro/steering/challenges.md
            cat knowledge_challenges.md >> .kiro/steering/challenges.md
          fi
          
          if [ -f knowledge_lessons.md ]; then
            echo "" >> .kiro/steering/lessons.md
            cat knowledge_lessons.md >> .kiro/steering/lessons.md
          fi

      - name: Check for changes
        id: check-changes
        run: |
          git add .
          if git diff --cached --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No knowledge updates needed"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Knowledge updates detected"
          fi

      - name: Commit knowledge updates
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          git commit -m "üìö Auto-capture lessons from PR #$PR_NUMBER

          Automated knowledge update from merged pull request.

          PR Title: $(cat pr_info.json | jq -r '.title')
          Changed Files: $(cat changed_files.txt | tr '\n' ' ')
          "

      - name: Push knowledge update branch
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # GitHub Actions„ÅÆË™çË®º„Çí‰ΩøÁî®„Åó„Å¶push
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin $BRANCH_NAME
          echo "BRANCH_PUSHED=true" >> $GITHUB_OUTPUT
          echo "PR_URL=https://github.com/${{ github.repository }}/pull/new/$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create notification issue
        if: steps.check-changes.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_URL="https://github.com/${{ github.repository }}/pull/new/$BRANCH_NAME"
          
          gh issue create \
            --title "üìö [Action Required] Knowledge update from PR #${PR_NUMBER}" \
            --body "$(cat << EOF
          ## üìö Áü•Ë≠òÊõ¥Êñ∞„Éñ„É©„É≥„ÉÅ„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü

          PR #${PR_NUMBER} „Åã„ÇâËá™ÂãïÊäΩÂá∫„Åï„Çå„ÅüÂÆüË£ÖÁµåÈ®ì„ÇíË®òÈå≤„Åô„Çã„Éñ„É©„É≥„ÉÅ„Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü„ÄÇ

          ### üîó Pull Request„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          
          ‰ª•‰∏ã„ÅÆ„É™„É≥„ÇØ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Å¶Pull Request„Çí‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          **[‚Üí Pull Request„Çí‰ΩúÊàê](${PR_URL})**

          ### üìù Êõ¥Êñ∞ÂÜÖÂÆπ
          - ÂÆüË£Ö„Éë„Çø„Éº„É≥„ÅÆÊäΩÂá∫
          - Ë™≤È°å„Å®Ëß£Ê±∫Á≠ñ„ÅÆË®òÈå≤  
          - ÂÜçÂà©Áî®ÂèØËÉΩ„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÁâπÂÆö

          ### ‚ÑπÔ∏è ÊÉÖÂ†±
          - üåø „Éñ„É©„É≥„ÉÅ: \`${BRANCH_NAME}\`
          - ü§ñ Ëá™ÂãïÁîüÊàê: Claude Knowledge Bot
          - üìÖ ‰ΩúÊàêÊó•ÊôÇ: $(date '+%Y-%m-%d %H:%M:%S')
          - üîó ÂÖÉPR: #${PR_NUMBER}

          „Åì„ÅÆIssue„ÅØPR„Åå‰ΩúÊàê„Åï„Çå„Åü„ÇâÈñâ„Åò„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
          EOF
          )"

      - name: Summary
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "## üìö Knowledge Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Branch created: \`$BRANCH_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìù An issue has been created with instructions to create a Pull Request." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üîó [View Issues](https://github.com/${{ github.repository }}/issues)" >> $GITHUB_STEP_SUMMARY
