# Knowledge System Configuration
# 自動知識蓄積システムの設定ファイル

# GitHub Actions 設定
github_actions:
  # 知識キャプチャを実行するPRの条件
  trigger_conditions:
    - merged: true
    - target_branch: "main"
    - exclude_labels: ["skip-knowledge-capture", "documentation"]

  # 自動PR作成設定
  auto_pr:
    enabled: true
    title_template: "🤖 Knowledge Update: Lessons from PR #{{pr_number}}"
    branch_prefix: "auto/knowledge-update-"
    labels: ["auto-generated", "documentation", "knowledge-update"]
    auto_merge: true # ステアリングファイルのみの変更時

  # 知識更新の対象ファイル
  knowledge_files:
    lessons: ".kiro/steering/lessons.md"
    patterns: ".kiro/steering/patterns.md"
    challenges: ".kiro/steering/challenges.md"

# 知識キャプチャ設定
capture_settings:
  # 分析対象ファイルの拡張子
  file_extensions:
    - ".tsx"
    - ".ts"
    - ".js"
    - ".jsx"
    - ".css"
    - ".md"

  # 除外するディレクトリ
  exclude_directories:
    - "node_modules"
    - ".git"
    - "dist"
    - "build"
    - ".next"

  # 最小変更行数（これ以下は知識キャプチャしない）
  min_lines_changed: 10

  # 自動タグ生成
  auto_tagging:
    enabled: true
    categories:
      - "UI"
      - "Logic"
      - "Performance"
      - "Accessibility"
      - "Responsive"
      - "Mobile"
      - "Desktop"
      - "Animation"
      - "Forms"
      - "Navigation"

# パターン抽出設定
pattern_extraction:
  # TypeScript/React パターン
  react_patterns:
    - "custom_hooks" # use* で始まるカスタムフック
    - "component_props" # interface *Props の定義
    - "styled_variants" # tailwind-variants の使用
    - "event_handlers" # イベントハンドラパターン

  # CSS/Tailwind パターン
  css_patterns:
    - "responsive_classes" # レスポンシブクラス
    - "layout_patterns" # レイアウトパターン
    - "animation_classes" # アニメーションクラス

  # 再利用性の判定基準
  reusability_threshold:
    high: 3 # 3回以上使用されているパターン
    medium: 2 # 2回使用されているパターン
    low: 1 # 1回のみの使用

# 課題検出設定
challenge_detection:
  # 検出対象のパターン
  error_patterns:
    - "try.*catch"
    - "console\\.(error|warn)"
    - "TODO|FIXME|HACK"
    - "\\.preventDefault\\(\\)"

  # コミットメッセージから課題を検出
  commit_message_keywords:
    - "fix"
    - "bug"
    - "issue"
    - "problem"
    - "error"
    - "broken"

  # 難易度判定基準
  difficulty_indicators:
    hard:
      - "performance"
      - "accessibility"
      - "cross-browser"
      - "mobile"
    medium:
      - "responsive"
      - "animation"
      - "form"
    easy:
      - "styling"
      - "text"
      - "color"

# 仕様強化設定
spec_enhancement:
  # 類似性判定の閾値
  similarity_threshold: 0.7

  # 自動提案する要素
  auto_suggestions:
    - "performance_considerations"
    - "accessibility_requirements"
    - "responsive_design"
    - "error_handling"
    - "test_cases"

  # 強化対象の仕様ファイル
  target_files:
    - "requirements.md"
    - "design.md"
    - "tasks.md"

# 品質管理設定
quality_control:
  # 重複検出
  duplicate_detection:
    enabled: true
    similarity_threshold: 0.8

  # 自動クリーンアップ
  auto_cleanup:
    enabled: true
    archive_after_days: 90 # 90日後に古い記録をアーカイブ
    max_entries_per_file: 50 # 1ファイルあたりの最大エントリ数

  # データ品質チェック
  quality_checks:
    - "required_fields_present" # 必須フィールドの存在確認
    - "code_snippets_valid" # コードスニペットの構文確認
    - "links_accessible" # 参考資料リンクの有効性確認

# 通知設定
notifications:
  # Slack通知（オプション）
  slack:
    enabled: false
    webhook_url: ""
    channel: "#development"

  # Discord通知（オプション）
  discord:
    enabled: false
    webhook_url: ""

  # GitHub Issue作成（問題検出時）
  github_issues:
    enabled: true
    labels: ["knowledge-system", "quality-issue"]

# メトリクス設定
metrics:
  # 追跡する指標
  tracked_metrics:
    - "pattern_reuse_rate" # パターン再利用率
    - "implementation_speed" # 実装速度の改善
    - "knowledge_base_growth" # 知識ベースの成長率
    - "similar_issues_reduction" # 類似問題の減少率

  # レポート生成
  reporting:
    enabled: true
    frequency: "weekly" # weekly/monthly
    output_format: "markdown" # markdown/json
